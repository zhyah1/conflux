// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for automatic delay escalation in project management.
 *
 * The flow analyzes project task data and uses AI to determine if a potential delay should be escalated.
 * It exports the `automaticDelayEscalation` function, the `AutomaticDelayEscalationInput` type, and the `AutomaticDelayEscalationOutput` type.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AutomaticDelayEscalationInputSchema = z.object({
  taskId: z.string().describe('The ID of the task to check for potential delays.'),
  taskName: z.string().describe('The name of the task.'),
  startDate: z.string().describe('The start date of the task (ISO format).'),
  dueDate: z.string().describe('The due date of the task (ISO format).'),
  currentProgress: z.number().describe('The current completion percentage of the task (0-100).'),
  dependencies: z.array(z.string()).describe('A list of task IDs that this task depends on.'),
  resourcesAllocated: z.array(z.string()).describe('A list of resources allocated to the task.'),
  issuesReported: z.array(z.string()).describe('A list of issues reported for the task.'),
});
export type AutomaticDelayEscalationInput = z.infer<typeof AutomaticDelayEscalationInputSchema>;

const AutomaticDelayEscalationOutputSchema = z.object({
  shouldEscalate: z.boolean().describe('Whether the potential delay should be escalated.'),
  escalationReason: z.string().describe('The reason for the potential delay escalation.'),
  suggestedActions: z.array(z.string()).describe('Suggested actions to mitigate the delay.'),
});
export type AutomaticDelayEscalationOutput = z.infer<typeof AutomaticDelayEscalationOutputSchema>;

export async function automaticDelayEscalation(input: AutomaticDelayEscalationInput): Promise<AutomaticDelayEscalationOutput> {
  return automaticDelayEscalationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'automaticDelayEscalationPrompt',
  input: {schema: AutomaticDelayEscalationInputSchema},
  output: {schema: AutomaticDelayEscalationOutputSchema},
  prompt: `You are an AI project management assistant. Your task is to analyze task data and determine if a potential delay should be escalated.

Task ID: {{{taskId}}}
Task Name: {{{taskName}}}
Start Date: {{{startDate}}}
Due Date: {{{dueDate}}}
Current Progress: {{{currentProgress}}}%
Dependencies: {{#each dependencies}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
Resources Allocated: {{#each resourcesAllocated}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
Issues Reported: {{#each issuesReported}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

Based on the information above, determine if the potential delay should be escalated. Provide a reason for your decision and suggest actions to mitigate the delay.

Output in JSON format:
{
  "shouldEscalate": boolean,
  "escalationReason": string,
  "suggestedActions": string[]
}
`,
});

const automaticDelayEscalationFlow = ai.defineFlow(
  {
    name: 'automaticDelayEscalationFlow',
    inputSchema: AutomaticDelayEscalationInputSchema,
    outputSchema: AutomaticDelayEscalationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
